<%  def none=[:]
    def hasMany=[:]
    def belongsTo=[:]
    def embed=[]
    def packageName = getPackageName(currentModelElement)
if (packageName != '') { %>
package ${packageName}
<% } %>           
class ${currentModelElement.name} {

<%  getAttributes(currentModelElement).each {attribute ->
        if (!attribute) return
        def attributeName = attribute.name
        def attributeType = friendlyNameType(attribute.type)
        def attributeTags = taggedValues(attribute)
%>    ${attributeType} ${attributeName}
<%  }
    getAssociationEnds(model, currentModelElement).each {sourceEnd ->
        def assoc = sourceEnd.association
        def thisEnd = assoc.connection.find {end -> end != sourceEnd}
        if (thisEnd.isNavigable()) {
            //def targetType = getEndType(thisEnd, packageName)
            def targetName = getEndName(thisEnd)
            if(isManyToOne(thisEnd, sourceEnd)) {
                //println "hasMany: ${targetName}"
                //println "${thisEnd.aggregation}"                 
                switch(sourceEnd.aggregation) {
                    case 'ak_none': /*how to deal with none*/ break;
                    case 'ak_aggregate': hasMany[targetName]=getEndTypeName(thisEnd, packageName); break;
                    case 'ak_composite': hasMany[targetName]=getEndTypeName(thisEnd, packageName); break;
                }
            } else if(isOneToMany(thisEnd, sourceEnd)) {
                switch(thisEnd.aggregation) {
                    // case 'ak_aggregate': hasMany[targetName]=getEndTypeName(thisEnd, packageName); break;
                    case 'ak_composite': belongsTo[targetName]=getEndTypeName(thisEnd, packageName); break;
                    case 'ak_aggregate': none[targetName]=getEndTypeName(thisEnd, packageName); break;
                    case 'ak_none': none[targetName]=getEndTypeName(thisEnd, packageName); break;
                }
            } else if(isOneToOne(thisEnd, sourceEnd)) {
                //println "embed: ${targetName}"
                //println "${sourceEnd.aggregation}"
                if(sourceEnd.aggregation.toString() == 'ak_composite') {
                   embed << targetName
                }
                none[targetName]=getEndTypeName(thisEnd, packageName);                
            }
              else if(isManyToMany(thisEnd, sourceEnd)) {
                // TODO Many to Many
            }
        }
    }
    none.each{k,v -> out.println("    ${v} ${k}")}
%>
<%if(embed.size()>0)   {def x='    static embedded='+embed;  out.println(x.replaceAll('"','\''))}
if(hasMany.size()>0)   {def x='    static hasMany='+hasMany; out.println(x.replaceAll('"',''))}
if(belongsTo.size()>0) {def x='    static belongsTo='+belongsTo; out.println(x.replaceAll('"',''))}%>
    String toString() {
        return "\${id}: \${${getAttributes(currentModelElement)[0]?.name}}"
    }
   
}

